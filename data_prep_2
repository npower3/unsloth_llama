import pandas as pd
import json

# Sample input and output DataFrames
df_input = pd.DataFrame([
    {
        "MemberID": "A123456789",
        "FirstName": "John",
        "LastName": "Doe",
        "DateOfBirth": "1980-05-15",
        "Gender": "M",
        "PlanCode": "PLN001",
        "CoverageStartDate": "2021-01-01",
        "CoverageEndDate": "2021-12-31",
        "RelationshipCode": "1"
    },
    {
        "MemberID": "B987654321",
        "FirstName": "Jane",
        "LastName": "Smith",
        "DateOfBirth": "1990-07-20",
        "Gender": "F",
        "PlanCode": "PLN002",
        "CoverageStartDate": "2022-01-01",
        "CoverageEndDate": "2022-12-31",
        "RelationshipCode": "2"
    }
])

df_output = pd.DataFrame([
    {
        "MemberID": "A123456789",
        "FullName": "John Doe",
        "DateOfBirth": "1980-05-15",
        "Gender": "Male",
        "PlanCode": "PLN001",
        "CoveragePeriod": {
            "Start": "2021-01-01",
            "End": "2021-12-31"
        },
        "Relationship": "Spouse"
    },
    {
        "MemberID": "B987654321",
        "FullName": "Jane Smith",
        "DateOfBirth": "1990-07-20",
        "Gender": "Female",
        "PlanCode": "PLN002",
        "CoveragePeriod": {
            "Start": "2022-01-01",
            "End": "2022-12-31"
        },
        "Relationship": "Child"
    }
])

# Relationship code mapping
relationship_mapping = {
    "1": "Spouse",
    "2": "Child",
    "3": "Self",
    "4": "Other"
}

# System prompt
system_prompt = (
    "You are an expert in healthcare data interoperability and transformation. "
    "Your task is to convert member eligibility records from a source format to a standardized target format, "
    "ensuring compliance with interoperability standards such as HL7 FHIR and CMS regulations.\n\n"
    "Objectives:\n"
    "1. Data Mapping: Accurately map fields from the source schema to the target schema, applying necessary transformations to align with standardized terminologies and codes.\n"
    "2. Code Translation: Implement code translations where required. For example, transform relationship codes like '1' to standardized codes like 'Spouse' in the target schema.\n"
    "3. Data Integrity: Ensure that all transformed data maintains integrity, with consistent and accurate representation across the target dataset.\n"
    "4. Compliance: Adhere to relevant healthcare data standards and regulations to facilitate seamless data exchange between systems."
)

# Table definitions
table_definitions = (
    "<table_definitions>\n"
    "  <source_table>\n"
    "    <column name=\"MemberID\" type=\"string\" />\n"
    "    <column name=\"FirstName\" type=\"string\" />\n"
    "    <column name=\"LastName\" type=\"string\" />\n"
    "    <column name=\"DateOfBirth\" type=\"date\" />\n"
    "    <column name=\"Gender\" type=\"string\" />\n"
    "    <column name=\"PlanCode\" type=\"string\" />\n"
    "    <column name=\"CoverageStartDate\" type=\"date\" />\n"
    "    <column name=\"CoverageEndDate\" type=\"date\" />\n"
    "    <column name=\"RelationshipCode\" type=\"string\" />\n"
    "  </source_table>\n"
    "  <target_table>\n"
    "    <column name=\"MemberID\" type=\"string\" />\n"
    "    <column name=\"FullName\" type=\"string\" />\n"
    "    <column name=\"DateOfBirth\" type=\"date\" />\n"
    "    <column name=\"Gender\" type=\"string\" />\n"
    "    <column name=\"PlanCode\" type=\"string\" />\n"
    "    <column name=\"CoveragePeriod\" type=\"object\">\n"
    "      <field name=\"Start\" type=\"date\" />\n"
    "      <field name=\"End\" type=\"date\" />\n"
    "    </column>\n"
    "    <column name=\"Relationship\" type=\"string\" />\n"
    "  </target_table>\n"
    "</table_definitions>"
)

# Merge input and output DataFrames on MemberID
df_merged = pd.merge(df_input, df_output, on="MemberID", suffixes=("_input", "_output"))

# Function to generate XML elements from a dictionary
def dict_to_xml(tag, d):
    parts = [f"<{tag}>"]
    for key, val in d.items():
        if isinstance(val, dict):
            parts.append(dict_to_xml(key, val))
        else:
            parts.append(f"  <{key}>{val}</{key}>")
    parts.append(f"</{tag}>")
    return "\n".join(parts)

# Generate chat prompts
chat_prompts = []

for _, row in df_merged.iterrows():
    # Construct input XML
    input_data = {
        "MemberID": row["MemberID"],
        "FirstName": row["FirstName"],
        "LastName": row["LastName"],
        "DateOfBirth": row["DateOfBirth"],
        "Gender": row["Gender"],
        "PlanCode": row["PlanCode"],
        "CoverageStartDate": row["CoverageStartDate"],
        "CoverageEndDate": row["CoverageEndDate"],
        "RelationshipCode": row["RelationshipCode"]
    }
    input_xml = dict_to_xml("input", input_data)

    # Construct response XML
    response_data = {
        "MemberID": row["MemberID"],
        "FullName": row["FullName"],
        "DateOfBirth": row["DateOfBirth_output"],
        "Gender": row["Gender_output"],
        "PlanCode": row["PlanCode_output"],
        "CoveragePeriod": {
            "Start": row["CoveragePeriod"]["Start"],
            "End": row["CoveragePeriod"]["End"]
        },
        "Relationship": row["Relationship"]
    }
    response_xml = dict_to_xml("response", response_data)

    # Construct reason
    reason_text = (
        "<reason>\n"
        "The 'RelationshipCode' field requires transformation based on a predefined mapping. "
        "Other fields such as 'MemberID', 'FullName', 'DateOfBirth', 'Gender', 'PlanCode', and 'CoveragePeriod' "
        "are transferred directly or reformatted without code mapping.\n"
        "</reason>"
    )

    # Construct RelationshipCode mapping
    mapping_xml = "<RelationshipCode_mapping>\n"
    for src_val, tgt_val in relationship_mapping.items():
        mapping_xml += f"  <map source=\"{src_val}\">{tgt_val}</map>\n"
    mapping_xml += "</RelationshipCode_mapping>"

    # Combine all parts into chat template format
    chat_template = [
        {
            "role": "system",
            "content": system_prompt
        },
        {
            "role": "user",
            "content": f"{table_definitions}\n\n{input_xml}"
        },
        {
            "role": "assistant",
            "content": f"{response_xml}\n\n{reason_text}\n\n{mapping_xml}"
        }
    ]

    chat_prompts.append(chat_template)

# Output the chat prompts as JSON
print(json.dumps(chat_prompts, indent=2))


with open('chat_prompts.jsonl', 'w', encoding='utf-8') as f:
    for chat in chat_prompts:
        json_line = json.dumps(chat, ensure_ascii=False)
        f.write(json_line + '\n')
