import xml.etree.ElementTree as ET
from xml.dom import minidom

def prettify_xml(elem):
    """Return a pretty-printed XML string for the Element."""
    rough_string = ET.tostring(elem, 'utf-8')
    reparsed = minidom.parseString(rough_string)
    return reparsed.toprettyxml(indent="  ")

def generate_xml_prompt(sample_input, sample_output, relationship_mapping):
    """
    Generates an XML prompt for a data transformation task.

    Parameters:
    - sample_input (dict): A sample input record.
    - sample_output (dict): The corresponding expected output record.
    - relationship_mapping (dict): Mapping rules for the 'RelationshipCode' field.

    Returns:
    - str: The formatted XML prompt as a string.
    """
    # Root element
    root = ET.Element('prompt')

    # Input element
    input_elem = ET.SubElement(root, 'input')
    for col, val in sample_input.items():
        col_elem = ET.SubElement(input_elem, col)
        col_elem.text = str(val)

    # Response element
    response = ET.SubElement(root, 'response')
    for col, val in sample_output.items():
        if isinstance(val, dict):
            col_elem = ET.SubElement(response, col)
            for sub_col, sub_val in val.items():
                sub_elem = ET.SubElement(col_elem, sub_col)
                sub_elem.text = str(sub_val)
        else:
            col_elem = ET.SubElement(response, col)
            col_elem.text = str(val)

    # Reason element
    reason = ET.SubElement(root, 'reason')
    reason.text = (
        "The 'RelationshipCode' field requires transformation based on a predefined mapping. "
        "Other fields such as 'MemberID', 'FullName', 'DateOfBirth', 'Gender', 'PlanCode', and 'CoveragePeriod' "
        "are transferred directly or reformatted without code mapping."
    )

    # RelationshipCode Mapping
    mapping_elem = ET.SubElement(root, 'RelationshipCode_mapping')
    for src_val, tgt_val in relationship_mapping.items():
        map_elem = ET.SubElement(mapping_elem, 'map', source=str(src_val))
        map_elem.text = str(tgt_val)

    return prettify_xml(root)

# Example usage:

sample_input = {
    "MemberID": "A123456789",
    "FirstName": "John",
    "LastName": "Doe",
    "DateOfBirth": "1980-05-15",
    "Gender": "M",
    "PlanCode": "PLN001",
    "CoverageStartDate": "2021-01-01",
    "CoverageEndDate": "2021-12-31",
    "RelationshipCode": "1"
}

sample_output = {
    "MemberID": "A123456789",
    "FullName": "John Doe",
    "DateOfBirth": "1980-05-15",
    "Gender": "Male",
    "PlanCode": "PLN001",
    "CoveragePeriod": {
        "Start": "2021-01-01",
        "End": "2021-12-31"
    },
    "Relationship": "Spouse"
}

relationship_mapping = {
    "1": "Spouse",
    "2": "Child",
    "3": "Self",
    "4": "Other"
}

# Generate the XML prompt
xml_prompt = generate_xml_prompt(sample_input, sample_output, relationship_mapping)

# Output the XML prompt
print(xml_prompt)
